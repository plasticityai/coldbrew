image: registry.gitlab.com/plasticity/ubuntu-dind:16.04

services:
  - docker:dind

stages:
  - Build and Deploy
  - Build Docker Image

before_script:
  # Setup package manager
  - apt-get update 2>&1 >/dev/null
  - apt-get install curl wget git -y
  - apt-get install libblas-dev liblapack-dev libatlas-base-dev gfortran -y
  - apt-get install python -y
  - apt-get install python-pip -y
  - apt-get install python-setuptools -y
  - apt-get install python3-setuptools python3-dev python3-venv -y
  - apt-get install python-dev -y
  - apt-get install openssh-server -y
  # Setup SSH configuration
  - mkdir -p ~/.ssh
  - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
  # Install gettext for envsubst
  - apt-get install gettext -y
  # Install AWSCLI
  - pip install awscli
  # Install Coldbrew dependencies
  - apt-get update
  # Install Java
  - apt-get install default-jre -y
  # Install Emscripten
  - curl https://gitlab.com/Plasticity/coldbrew/raw/master/install_emscripten.sh | /bin/bash
  # Patch binaryen Optimizer to prevent StackIR.cpp - Assertion Failed: values.size() > 0 error
  - apt-get install nano cmake -y
  - cd /tmp && git clone https://github.com/WebAssembly/binaryen.git
  - sed -e 's/assert(values.size() > 0);/if(values.size() <= 0) { return; } assert(values.size() > 0);/g;' /tmp/binaryen/src/passes/StackIR.cpp > /tmp/binaryen/src/passes/StackIR.cpp.tmp
  - mv /tmp/binaryen/src/passes/StackIR.cpp.tmp /tmp/binaryen/src/passes/StackIR.cpp
  - cd /tmp/binaryen && cmake . && make
  - cd /usr/local/coldbrew/emsdk/clang/*/binaryen/bin/ && cp asm2wasm asm2wasm.bak
  - cp /tmp/binaryen/bin/asm2wasm /usr/local/coldbrew/emsdk/clang/*/binaryen/bin/asm2wasm
  - rm -rf /tmp/binaryen 
  # Install Clang libraries
  - cd /usr/local/coldbrew/ && curl -o clang+llvm.tar.xz http://releases.llvm.org/6.0.1/clang+llvm-6.0.1-x86_64-linux-gnu-ubuntu-16.04.tar.xz
  - cd /usr/local/coldbrew/ && mkdir -p ./clang+llvm && tar -C ./clang+llvm -xvf clang+llvm.tar.xz
  - cd /usr/local/coldbrew/ && cp -R ./clang+llvm/*/ ./emsdk/clang/lib/
  - cd /usr/local/coldbrew/emsdk/clang/lib/lib && (cp * ../ || true)
  - cd /usr/local/coldbrew/ && cp -R ./clang+llvm/*/ ./emsdk/clang/include/
  - cd /usr/local/coldbrew/emsdk/clang/include/include && (cp -r * ../ || true)
  # Install Python dependencies
  - apt-get install build-essential -y
  - apt-get install libffi-dev libssl-dev zlib1g-dev libncurses5-dev libncursesw5-dev libreadline-dev libsqlite3-dev  -y
  - apt-get install libgdbm-dev libdb5.3-dev libbz2-dev libexpat1-dev liblzma-dev tk-dev -y
  # Install OpenSSL with thread support
  - wget http://www.openssl.org/source/openssl-1.0.1g.tar.gz
  - tar -xvzf openssl-1.0.1g.tar.gz
  - cd openssl-1.0.1g && ./config threads -D_REENTRANT
  - cd openssl-1.0.1g && make
  - cd openssl-1.0.1g && make install_sw
  - rm -rf openssl-1.0.1g.tar.gz openssl-1.0.1g
  # Install Makefile dependencies
  - apt-get install unzip rsync -y
  # Install wasm-nm and wasm-gc
  - curl https://sh.rustup.rs -sSf | sh -s -- -y
  - /bin/bash -c "source $HOME/.cargo/env; cargo install wasm-nm"
  - /bin/bash -c "source $HOME/.cargo/env; cargo install wasm-gc"
  # Install uglify-js
  - /bin/bash -c "cd /usr/local/coldbrew/emsdk; source ./emsdk_env.sh; npm install -g uglify-js-es6"

Build and Deploy:
  stage: Build and Deploy
  script:
    # Add GitLab SSH private deploy key
    - eval $(ssh-agent -s)
    - tmpfile=$(mktemp ~/pk.XXXXXX)
    - echo "$SSH_PRIVATE_KEY" > $tmpfile
    - ssh-add $tmpfile
    - rm $tmpfile
    # Tag the release on GitLab
    - rm -rf ../tagger
    - mkdir -p ../tagger
    - cd ../tagger
    - git clone git@gitlab.com:$CI_PROJECT_PATH.git
    - cd $CI_PROJECT_NAME
    - git config --global user.email "dev_ci_bot@plasticity.ai"
    - git config --global user.name "Plasticity Developer Bot"
    # Build & Commit
    - export COLDBREW_TAGGER_DIR=$(pwd)
    - cd /usr/local/coldbrew/emsdk; source ./emsdk_env.sh; cd /$COLDBREW_TAGGER_DIR/src; make; cd ../
    - cd /usr/local/coldbrew/emsdk; source ./emsdk_env.sh; cd /$COLDBREW_TAGGER_DIR/src; echo "" >> ../customize/coldbrew_settings.py; echo "DEBUG_MODE = True" >> ../customize/coldbrew_settings.py; COLDBREW_DIST_DIR=dist-debug make; cd ../
    - git checkout ./customize/coldbrew_settings.py
    - cat .gitignore | grep 'dist' -v > .gitignore.tmp
    - mv .gitignore.tmp .gitignore
    - git pull
    - git add .
    - git commit -n -m "Release $(python3 -c "import version; print(version.__version__)")"
    - git push -f origin HEAD:releases
    # End Build & Commit
    - git tag -a $(python3 -c "import version; print(version.__version__)") -m "Release $(python3 -c "import version; print(version.__version__)")"
    - git push -f origin HEAD:releases --tags
    # Push to Amazon S3
    - sed -e "s/coldbrew.asm.js/https:\/\/cdn.jsdelivr.net\/gh\/plasticityai\/coldbrew@$(python3 -c "import version; print(version.__version__)")\/dist\/coldbrew.asm.js/g;" dist/index.html > dist/index.remote.html
    - aws s3 cp dist/index.remote.html s3://coldbrew.plasticity.ai/index.html
    - aws s3 cp dist/index.remote.html s3://coldbrew.plasticity.ai/index-$(python3 -c "import version; print(version.__version__)").html
    # End Push to Amazon S3
    - cd $CI_PROJECT_DIR
    - rm -rf ../tagger
    - sleep 60 # Wait for GitLab to mirror to GitHub
    # Create a release on GitHub
    - curl -u plasticity-admin:$GITHUB_TOKEN -d "{\"tag_name\":\"$(python3 -c "import version; print(version.__version__)")\", \"name\":\"Release $(python3 -c "import version; print(version.__version__)")\"}" -H "Content-Type:"" application/json" -X POST https://api.github.com/repos/plasticityai/$CI_PROJECT_NAME/releases
  environment:
    name: Coldbrew Demo
    url: http://coldbrew.plasticity.ai/
    
  only:
    - master

Build Docker Image:
  stage: Build Docker Image
  script:
    - docker login -u "gitlab-ci-token" -p "$CI_BUILD_TOKEN" $CI_REGISTRY
    - docker build --pull -t "$CI_REGISTRY_IMAGE:$CI_BUILD_REF_NAME" .
    - docker push "$CI_REGISTRY_IMAGE:$CI_BUILD_REF_NAME"
    - docker tag "$CI_REGISTRY_IMAGE:$CI_BUILD_REF_NAME" "$CI_REGISTRY_IMAGE:$(python3 -c "import version; print(version.__version__)")"
    - docker push "$CI_REGISTRY_IMAGE:$(python3 -c "import version; print(version.__version__)")"
    - docker tag "$CI_REGISTRY_IMAGE:$CI_BUILD_REF_NAME" "$CI_REGISTRY_IMAGE:latest"
    - docker push "$CI_REGISTRY_IMAGE:latest"
    - cd src; make clean; make ../installs/python-3.5.2/lib/libpython3.5.syncified.o; cd ..;
    - echo -e "\nCOPY ./ /BUILD/\n\nVOLUME /BUILD/customize"
    - docker build --pull -t "$CI_REGISTRY_IMAGE-builder:$CI_BUILD_REF_NAME" .
    - docker push "$CI_REGISTRY_IMAGE-builder:$CI_BUILD_REF_NAME"
    - docker tag "$CI_REGISTRY_IMAGE-builder:$CI_BUILD_REF_NAME" "$CI_REGISTRY_IMAGE-builder:$(python3 -c "import version; print(version.__version__)")"
    - docker push "$CI_REGISTRY_IMAGE-builder:$(python3 -c "import version; print(version.__version__)")"
    - docker tag "$CI_REGISTRY_IMAGE-builder:$CI_BUILD_REF_NAME" "$CI_REGISTRY_IMAGE-builder:latest"
    - docker push "$CI_REGISTRY_IMAGE-builder:latest"
  only:
    - master
